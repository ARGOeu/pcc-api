package gr.grnet.pccapi.endpoint;

import gr.grnet.pccapi.dto.APIResponseMsg;
import gr.grnet.pccapi.dto.ServiceDto;
import gr.grnet.pccapi.service.ServiceService;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import lombok.AllArgsConstructor;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.tags.Tag;

/** Controller that provides all necessary service related functionality */
@AllArgsConstructor
@Tag(name = "Service")
@Path("/services")
public class ServiceEndpoint {

  ServiceService service;

  /** List all available services */
  @Operation(
      summary = "Fetch all available Services.",
      description = "This operation fetches from the database the available Services.")
  @APIResponse(
      responseCode = "200",
      description = "All available Services.",
      content =
          @Content(schema = @Schema(type = SchemaType.ARRAY, implementation = ServiceDto.class)))
  @APIResponse(
      responseCode = "404",
      description = "The service cannot find the requested service.",
      content =
          @Content(
              schema = @Schema(type = SchemaType.OBJECT, implementation = APIResponseMsg.class)))
  @GET
  @Produces(MediaType.APPLICATION_JSON)
  public Response getAll() {
    return Response.ok().entity(service.fetchAll()).build();
  }

  /** List one specific service based on the provided id. */
  @Operation(
      summary = "Fetch a particular service.",
      description =
          "Passing the unique service ID generated by the database,"
              + " you can fetch the corresponding Service.")
  @APIResponse(
      responseCode = "200",
      description = "The particular Service",
      content =
          @Content(schema = @Schema(type = SchemaType.OBJECT, implementation = ServiceDto.class)))
  @GET
  @Produces(MediaType.APPLICATION_JSON)
  @Path("/{id}")
  public Response getById(
      @Parameter(
              description = "The service ID to be retrieved.",
              required = true,
              example = "1",
              schema = @Schema(type = SchemaType.INTEGER))
          @PathParam("id")
          int id) {
    return Response.ok().entity(service.fetchById(id)).build();
  }
}
