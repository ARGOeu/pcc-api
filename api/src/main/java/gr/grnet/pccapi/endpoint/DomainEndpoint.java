package gr.grnet.pccapi.endpoint;

import gr.grnet.pccapi.dto.APIResponseMsg;
import gr.grnet.pccapi.dto.DomainDto;
import gr.grnet.pccapi.service.DomainService;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import lombok.AllArgsConstructor;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.tags.Tag;

@AllArgsConstructor
@Path("/v1/domains")
@Tag(name = "Domain")
public class DomainEndpoint {

  DomainService domainService;

  @Operation(
      summary = "Fetch a particular Domain.",
      description =
          "Passing the unique Scientific Domain ID generated by the database, you can fetch the corresponding Domain.")
  @APIResponse(
      responseCode = "200",
      description = "The particular Scientific Domain",
      content =
          @Content(schema = @Schema(type = SchemaType.OBJECT, implementation = DomainDto.class)))
  @APIResponse(
      responseCode = "404",
      description = "The service cannot find the requested domain.",
      content =
          @Content(
              schema = @Schema(type = SchemaType.OBJECT, implementation = APIResponseMsg.class)))
  @GET
  @Path("/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  public Response getById(
      @Parameter(
              description = "The Scientific Domain ID to be retrieved.",
              required = true,
              example = "1",
              schema = @Schema(type = SchemaType.INTEGER))
          @PathParam("id")
          Integer id) {

    var domain = domainService.fetchById(id);

    return Response.ok().entity(domain).build();
  }

  @Operation(
      summary = "Fetch all available Scientific Domains.",
      description =
          "This operation fetches from the database the available Scientific Domains."
              + " After transforming the Scientific Domains to JSON,"
              + " the API returns a JSON array as an HTTP response body.")
  @APIResponse(
      responseCode = "200",
      description = "All available Scientific Domains.",
      content =
          @Content(schema = @Schema(type = SchemaType.ARRAY, implementation = DomainDto.class)))
  @GET
  @Produces(MediaType.APPLICATION_JSON)
  public Response getAll() {

    var domains = domainService.fetchAll();

    return Response.ok().entity(domains).build();
  }
}
