import subprocess
import time
import os
import mariadb
import argparse


def execute_jar(jar_path, expiration, http_method, pids_total_num, offset, prefix,
                pids_chunk_size, http_timeout, threads_num, request_interval):
    try:
        subprocess.check_call(['java', '-jar', jar_path,
                               '--expiration', str(expiration),
                               '--pids-total-number', str(pids_total_num),
                               '--probe-offset', str(offset),
                               '--prefix', str(prefix),
                               '--pids-chunk-size', str(pids_chunk_size),
                               '--http-timeout', str(http_timeout),
                               '--threads-number', str(threads_num),
                               '--http-method', str(http_method),
                               '--request-interval', str(request_interval)])
    except subprocess.CalledProcessError as e:
        print(f"Error executing JAR: {e}")


def main(args):
    jar_path = args.jar_path
    pids_total_num = args.pids_total_number
    offset = args.probe_offset
    expiration = args.expiration
    prefix = args.prefix
    http_method = args.http_method
    pids_chunk_size = args.pids_chunk_size
    http_timeout = args.http_timeout
    threads_num = args.threads_number
    request_interval = args.request_interval

    # Retrieve database connection details from environment variables
    db_host = os.environ.get('HRLS_DATABASE_IP')
    db_user = os.environ.get('HRLS_DATABASE_USERNAME')
    db_password = os.environ.get('HRLS_DATABASE_PASSWORD')
    db_database = os.environ.get('HRLS_DATABASE_NAME')

    # Connect to the database
    cnx = mariadb.connect(
        host=db_host,
        user=db_user,
        password=db_password,
        database=db_database
    )

    # Create a cursor object to execute SQL queries
    cursor = cnx.cursor()

    # Construct the SQL select statement
    # Define the table and column to update
    table_name = 'prefixes'
    column_name = 'handles_count'
    select_query = f"SELECT {column_name} FROM {table_name} WHERE prefix = {prefix}"

    try:
        # Execute the update query
        cursor.execute(select_query)
        pids_total_num = cursor.fetchone()[0]
        print(pids_total_num)
        # Print a success message
        print(f"Successfully fetched {column_name} from {table_name}")
    except mariadb.Error as e:
        # Handle any errors that occur during the update process
        print(f"Error updating {column_name} in {table_name}: {e}")

    # List of output files generated by each JAR
    output_files = prefix + '.log'
    execute_jar(jar_path, expiration, http_method, pids_total_num, offset, prefix,
                pids_chunk_size, http_timeout, threads_num, request_interval)

    # Parse and print the values from the output file
    output_file = output_files
    with open(output_file, 'r') as f:
        count = 0
        lines = f.readlines()
        for line in lines:
            # Process each line as needed
            count = count + int(line.strip())
        print("Resolvable count:" + str(count))

    # Define the table and column to update
    table_name = 'prefixes'
    column_name = 'resolvable_count'
    new_value = count

    # Construct the SQL UPDATE statement
    update_query = f"UPDATE {table_name} SET {column_name} = {new_value} WHERE prefix = {prefix}"

    try:
        # Execute the update query
        cursor.execute(update_query)

        # Commit the changes to the database
        cnx.commit()

        # Print a success message
        print(f"Successfully updated {column_name} in {table_name}")
    except mariadb.Error as e:
        # Handle any errors that occur during the update process
        print(f"Error updating {column_name} in {table_name}: {e}")

    # Close the cursor and database connection
    cursor.close()
    cnx.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--jar-path",
        nargs="?",
        default="daemons-1.0.0-SNAPSHOT.jar"
    )
    parser.add_argument(
        "--expiration",
        nargs="?",
        default=1
    )
    parser.add_argument(
        "--pids-total-number",
        nargs="?"
    )
    parser.add_argument(
        "--probe-offset",
        metavar="probe-offset",
        nargs="?",
        default=0
    )
    parser.add_argument(
        "--prefix",
        nargs="?",
        required=True
    )
    parser.add_argument(
        "--pids-chunk-size",
        nargs="?",
        default=10
    )
    parser.add_argument(
        "--http-timeout",
        nargs="?",
        default=600
    )
    parser.add_argument(
        "--threads-number",
        nargs="?",
        default=1
    )
    parser.add_argument(
        "--http-method",
        nargs="?",
        default="GET"
    )
    parser.add_argument(
        "--request-interval",
        nargs="?",
        default=0
    )
    parser.add_argument(
        "--verbose",
        nargs="?",
        default="INFO"
    )

    args = parser.parse_args()
    main(args)
