package gr.grnet.pccapi.endpoint;

import gr.grnet.pccapi.dto.PrefixDto;
import gr.grnet.pccapi.dto.PrefixResponseDto;
import gr.grnet.pccapi.exception.APIError;
import gr.grnet.pccapi.service.PrefixService;
import lombok.AllArgsConstructor;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;
import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.tags.Tag;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.DELETE;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * Controller that provides all the prefix related functionality
 */
@Tag(name = "Prefix")
@Path("/prefixes")
@AllArgsConstructor
public class PrefixEndpoint {

    PrefixService prefixService;

    @Operation(
            summary = "Create a new Prefix.")
    @APIResponse(
            responseCode = "201",
            description = "The particular Prefix.",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = PrefixResponseDto.class)))
    @APIResponse(responseCode = "404", description = "The service cannot find the requested link resources.",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = APIError.class)))
    @APIResponse(responseCode = "409", description = "The service already has a prefix with same values.",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = APIError.class)))
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(
            @Parameter(
                    description = "The Prefix to be saved to the service.",
                    required = true,
                    schema = @Schema(type = SchemaType.OBJECT, implementation = PrefixDto.class))
            @RequestBody PrefixDto prefixDto) {
        return Response
                .status(Response.Status.CREATED)
                .entity(prefixService.create(prefixDto))
                .build();
    }


    @Tag(name="Prefix")
    @APIResponse(
            responseCode = "200",
            description = "Get the list of all the available prefixes in PCC-api.",
            content = @Content(schema = @Schema( type = SchemaType.ARRAY, implementation = PrefixResponseDto.class)))
    @Operation(summary = "Get a list of all available prefixes")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAll(){
        var prefixes = prefixService.getAll();
        return Response.ok().entity(prefixes).build();
    }

    @Operation(
            summary = "Delete a particular Domain.",
            description = "Passing the unique Prefix ID generated by the database, you can delete the corresponding Prefix.")
    @APIResponse(
            responseCode = "200",
            description = "The Prefix has been successfully deleted.",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = APIError.class))
    )
    @APIResponse(
            responseCode = "404",
            description = "Prefix not Found.",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = APIError.class))
    )
    @DELETE
    @Path("/{id}")
    public Response delete(@Parameter(
            description = "The Predix ID to be deleted.",
            required = true,
            example = "1",
            schema = @Schema(type = SchemaType.INTEGER)) @PathParam("id") Integer id) {

        var apiError = new APIError("The Prefix has been successfully deleted.");
        prefixService.delete(id);
        return Response.ok().entity(apiError).build();
    }

    @Operation(
            summary = "Fetch a particular Prefix.",
            description = "Passing the unique Prefix ID generated by the database, you can fetch the corresponding Prefix." )
    @APIResponse(
            responseCode = "200",
            description = "The particular Prefix.",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = PrefixResponseDto.class)))
    @APIResponse(
            responseCode = "404",
            description = "Prefix not Found.",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = APIError.class))
    )
    @GET
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getById(@Parameter(
            description = "The Prefix ID to be retrieved.",
            required = true,
            example = "1",
            schema = @Schema(type = SchemaType.INTEGER))  @PathParam("id") Integer id){

        var prefix = prefixService.getById(id);

        return Response.ok().entity(prefix).build();
    }
}