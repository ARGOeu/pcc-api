package gr.grnet.pccapi.endpoint;

import gr.grnet.pccapi.dto.DomainDto;
import gr.grnet.pccapi.dto.ServiceDto;
import gr.grnet.pccapi.service.ServiceService;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.tags.Tag;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * Controller that provides all necessary service related functionality
 */
@Path("/services")
@Tag(name="Service")
public class ServiceEndpoint {

    ServiceService service;

    public ServiceEndpoint(ServiceService service) {
        this.service = service;
    }

    /**
     *
     * List all available services
     */
    @Operation(
            summary = "Fetch all available Services.",
            description = "This operation fetches from the database the available Services." )
    @APIResponse(
            responseCode = "200",
            description = "All available Services.",
            content = @Content(schema = @Schema(
                    type = SchemaType.ARRAY,
                    implementation = ServiceDto.class)))
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response listAllServices(){
        return Response.ok().entity(service.findAllServices()).build();
    }

    /**
     *
     * List one specific service based on the provided id.
     */
    @Operation(
            summary = "Fetch a particular service.",
            description = "Passing the unique service ID generated by the database," +
                    " you can fetch the corresponding Service." )
    @APIResponse(
            responseCode = "200",
            description = "The particular Service",
            content = @Content(schema = @Schema(
                    type = SchemaType.OBJECT,
                    implementation = ServiceDto.class)))
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/{id}")
    public Response listOneService(@Parameter(
            description = "The service ID to be retrieved.",
            required = true,
            example = "1",
            schema = @Schema(type = SchemaType.INTEGER))  @PathParam("id") int id) {
        return Response.ok().entity(service.findOneService(id)).build();
    }
}